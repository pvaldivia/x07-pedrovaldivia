        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Switches turn member variable to represent whether it's X's or O's turn
       28:    8:void TicTacToeBoard::toggleTurn()
        -:    9:{
       28:   10:	if(turn == X)
       17:   11:	turn = O;
       11:   12:	else turn = X;
       28:   13:}
        -:   14:
        -:   15://Constructor sets an empty board and specifies it is X's turn first
       15:   16:TicTacToeBoard::TicTacToeBoard()
        -:   17:{
       15:   18:	turn = X;
       60:   19:	for (int row = 0; row < 3; row++)
        -:   20:	{
      180:   21:		for (int col = 0; col < 3; col++)
        -:   22:		{
      135:   23:			board[row][col] = Blank;
        -:   24:		}
        -:   25:	}
       15:   26:}
        -:   27:
        -:   28://Resets each board location to the Blank Piece value
        4:   29:void TicTacToeBoard::clearBoard()
        -:   30:{
       16:   31:	for (int row = 0; row < 3; row++)
        -:   32:	{
       48:   33:		for (int col = 0; col < 3; col++)
        -:   34:		{
       36:   35:			board[row][col] = Blank;
        -:   36:		}
        -:   37:	}
        -:   38:	
        4:   39:}
        -:   40:
        -:   41:/**
        -:   42: * Places the piece of the current turn on the board, returns what
        -:   43: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   44: * NOT allow to place a piece in a location where there is already a piece.
        -:   45: * In that case, placePiece just returns what is already at that location. 
        -:   46: * Out of bounds coordinates return the Piece Invalid value
        -:   47:**/ 
       31:   48:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   49:{
       31:   50:	if ((row > 2 || row < 0) || (column > 2 || row < 0))
        3:   51:	return Invalid;
        -:   52:	Piece whoWon;
       28:   53:	if (turn == X)
        -:   54:	{
       17:   55:		if (board[row][column] != Blank)
        -:   56:		{
        1:   57:			toggleTurn();
        1:   58:			return board[row][column];
        -:   59:		}
       16:   60:		board[row][column] = X;
       16:   61:		toggleTurn();
        -:   62:	}
        -:   63:	else
        -:   64:	{		
       11:   65:		if (board[row][column] != Blank)
        -:   66:		{
        3:   67:			toggleTurn();
        3:   68:			return board[row][column];
        -:   69:		}
        8:   70:		board[row][column] = O;
        8:   71:		toggleTurn();
        -:   72:	}
       24:   73:	return board[row][column];
        -:   74:}
        -:   75:
        -:   76:/**
        -:   77: * Returns what piece is at the provided coordinates, or Blank if there
        -:   78: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   79:**/
        5:   80:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   81:{
        5:   82:	if ((row > 2 || row < 0) || (column > 2 || row < 0))
        2:   83:	return Invalid;
        -:   84:
        3:   85:	return board[row][column];
        -:   86:}
        -:   87:
        -:   88:/**
        -:   89: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   90: * is not over, or Blank if the board is filled and no one has won.
        -:   91:**/
        3:   92:Piece TicTacToeBoard::getWinner()
        -:   93:{
        3:   94:	int check = 0;
        3:   95:	int winning = 0;
        -:   96:	Piece current;
        9:   97:	for (int row = 0; row < 3; row++)
        -:   98:	{
        7:   99:		current = board[row][0];
       22:  100:		for (int col = 0; col < 3; col++)
        -:  101:		{
       15:  102:			if (current == Blank || current != board[row][col])
        -:  103:			{
        6:  104:				col = 3;
        6:  105:				winning = 0;
        6:  106:				check++;
        -:  107:			}
        -:  108:			else
        9:  109:			winning++;		
        -:  110:		}
        7:  111:		if (winning == 3)
        -:  112:		{	
        1:  113:			clearBoard();
        1:  114:			return current;
        -:  115:		}
        -:  116:	}
        2:  117:	check = 0;
        2:  118:	winning = 0;
        5:  119:	for (int col = 0; col < 3; col++)
        -:  120:	{
        4:  121:		current = board[0][col];
       16:  122:		for (int row = 0; row < 3; row++)
        -:  123:		{
       12:  124:			if (current == Blank || current != board[row][col])
        -:  125:			{
        3:  126:				row = 3;
        3:  127:				winning = 0;
        3:  128:				check++;
        -:  129:			}
        -:  130:			else
        9:  131:			winning++;		
        -:  132:		}
        4:  133:		if (winning == 3)
        -:  134:		{	
        1:  135:			clearBoard();
        1:  136:			return current;
        -:  137:		}
        -:  138:	}
        -:  139:
        1:  140:	if (board[0][0] == board[1][1] && board[1][1] == board[2][2])
        -:  141:	{	
    #####:  142:		clearBoard();
    #####:  143:		return board[0][0];
        -:  144:	}
        1:  145:	if (board[0][2] == board[1][1] && board[1][1] == board[2][0])
        -:  146:	{
    #####:  147:		clearBoard();
    #####:  148:		return board[1][1];
        -:  149:	}
        -:  150:
        1:  151:	check = 0;
        -:  152:
        4:  153:	for (int row = 0; row < 3; row++)
        -:  154:	{
       12:  155:		for (int col = 0; col < 3; col++)
        -:  156:		{
        9:  157:			if(board[row][col] != Blank)
        9:  158:			check++;
        -:  159:		}
        -:  160:	}
        1:  161:	if (check == 9)
        -:  162:	{
        1:  163:		clearBoard();
        1:  164:		return Blank;
        -:  165:	}
        -:  166:
        -:  167:	
    #####:  168:  return Invalid;
        -:  169:
        -:  170:}
